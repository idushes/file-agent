# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_USERNAME ?= dushes
IMAGE_NAME = file-agent
VERSION ?= latest
FULL_IMAGE_NAME = $(DOCKER_USERNAME)/$(IMAGE_NAME):$(VERSION)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
RED = \033[0;31m
YELLOW = \033[1;33m
NC = \033[0m # No Color

.PHONY: help build tag push all clean test run stop logs

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "$(YELLOW)File Agent - Docker Build Commands$(NC)"
	@echo ""
	@echo "$(GREEN)Available commands:$(NC)"
	@echo "  help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
	@echo "  build         - –°–æ–±—Ä–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑ (amd64+arm64)"
	@echo "  build-local   - –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
	@echo "  build-amd64   - –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è amd64 (Kubernetes)"
	@echo "  push          - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑"
	@echo "  push-local    - –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑"
	@echo "  all           - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑"
	@echo "  test          - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  clean         - –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã"
	@echo "  info          - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–∑–µ"
	@echo ""
	@echo "$(GREEN)–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	@echo "  DOCKER_USERNAME - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Docker Hub (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dushes)"
	@echo "  VERSION         - –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)"
	@echo ""
	@echo "$(GREEN)–ü—Ä–∏–º–µ—Ä—ã:$(NC)"
	@echo "  make build"
	@echo "  make all VERSION=v1.0.0"
	@echo "  make push DOCKER_USERNAME=myuser VERSION=v1.0.0"

# –°–æ–±—Ä–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π Docker –æ–±—Ä–∞–∑ (–∏—Å–ø–æ–ª—å–∑—É—è –æ–±–ª–∞—á–Ω—ã–π –±–∏–ª–¥–µ—Ä)
build:
	@echo "$(GREEN)Building multiplatform Docker image...$(NC)"
	docker buildx build --platform linux/amd64,linux/arm64 \
		-t $(IMAGE_NAME):$(VERSION) \
		--load .
	@echo "$(GREEN)‚úÖ Multiplatform build completed: $(IMAGE_NAME):$(VERSION)$(NC)"

# –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è amd64 (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ)
build-local:
	@echo "$(GREEN)Building Docker image for local testing...$(NC)"
	docker build -t $(IMAGE_NAME):$(VERSION) .
	@echo "$(GREEN)‚úÖ Local build completed: $(IMAGE_NAME):$(VERSION)$(NC)"

# –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –¥–ª—è amd64 (Kubernetes —Å–µ—Ä–≤–µ—Ä—ã)
build-amd64:
	@echo "$(GREEN)Building Docker image for amd64...$(NC)"
	docker buildx build --platform linux/amd64 \
		-t $(IMAGE_NAME):$(VERSION) \
		--load .
	@echo "$(GREEN)‚úÖ Build completed for amd64: $(IMAGE_NAME):$(VERSION)$(NC)"

# –¢–µ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑ –¥–ª—è Docker Hub
tag: build
	@echo "$(GREEN)Tagging image for Docker Hub...$(NC)"
	docker tag $(IMAGE_NAME):$(VERSION) $(FULL_IMAGE_NAME)
	@echo "$(GREEN)‚úÖ Tagged: $(FULL_IMAGE_NAME)$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Docker Hub
check-login:
	@echo "$(YELLOW)Checking Docker Hub login...$(NC)"
	@if ! grep -q "https://index.docker.io/v1/" ~/.docker/config.json 2>/dev/null; then \
		echo "$(RED)‚ùå Not logged in to Docker Hub. Run 'docker login' first.$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Docker Hub login verified$(NC)"

# –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–∞ Docker Hub
push: check-login
	@echo "$(GREEN)Building and pushing multiplatform image to Docker Hub...$(NC)"
	docker buildx build --platform linux/amd64,linux/arm64 \
		-t $(FULL_IMAGE_NAME) \
		--push .
	@echo "$(GREEN)‚úÖ Multiplatform image pushed: $(FULL_IMAGE_NAME)$(NC)"

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–∞ Docker Hub
push-local: check-login
	@echo "$(GREEN)Tagging and pushing local image...$(NC)"
	docker tag $(IMAGE_NAME):$(VERSION) $(FULL_IMAGE_NAME)
	docker push $(FULL_IMAGE_NAME)
	@echo "$(GREEN)‚úÖ Local image pushed: $(FULL_IMAGE_NAME)$(NC)"

# –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑
all: push
	@echo "$(GREEN)üéâ All done! Multiplatform image available at: $(FULL_IMAGE_NAME)$(NC)"

# –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ
test: build
	@echo "$(GREEN)Testing Docker image...$(NC)"
	@echo "$(YELLOW)Starting container...$(NC)"
	docker run --rm -d \
		--name file-agent-test \
		-p 8082:8082 \
		-e PORT=8082 \
		$(IMAGE_NAME):$(VERSION)
	@echo "$(YELLOW)Waiting for container to start...$(NC)"
	@sleep 3
	@echo "$(YELLOW)Testing health endpoint...$(NC)"
	@if curl -s http://localhost:8082/health | grep -q "OK"; then \
		echo "$(GREEN)‚úÖ Health check passed$(NC)"; \
	else \
		echo "$(RED)‚ùå Health check failed$(NC)"; \
		docker stop file-agent-test; \
		exit 1; \
	fi
	@echo "$(YELLOW)Stopping test container...$(NC)"
	docker stop file-agent-test
	@echo "$(GREEN)‚úÖ Test completed successfully$(NC)"

# –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã
clean:
	@echo "$(GREEN)Cleaning up local images...$(NC)"
	@docker images -q $(IMAGE_NAME) | xargs -r docker rmi -f
	@docker images -q $(DOCKER_USERNAME)/$(IMAGE_NAME) | xargs -r docker rmi -f
	@echo "$(GREEN)‚úÖ Cleanup completed$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–∑–µ
info:
	@echo "$(GREEN)Image Information:$(NC)"
	@echo "  Local image:    $(IMAGE_NAME):$(VERSION)"
	@echo "  Docker Hub:     $(FULL_IMAGE_NAME)"
	@echo "  Size:           $$(docker images --format 'table {{.Size}}' $(IMAGE_NAME):$(VERSION) 2>/dev/null | tail -n +2 || echo 'Not built')"

# –°–±–æ—Ä–∫–∞ —Å –∫—ç—à–µ–º
build-no-cache:
	@echo "$(GREEN)Building Docker image without cache...$(NC)"
	docker build --no-cache -t $(IMAGE_NAME):$(VERSION) .
	@echo "$(GREEN)‚úÖ Build completed: $(IMAGE_NAME):$(VERSION)$(NC)" 